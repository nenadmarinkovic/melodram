{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadInstrument\", instrumentName => {\n      // Re-trigger loading state\n      this.setState({\n        instrument: null\n      });\n      Soundfont.instrument(this.props.audioContext, instrumentName, {\n        format: this.props.format,\n        soundfont: this.props.soundfont,\n        nameToUrl: (name, soundfont, format) => {\n          return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n        }\n      }).then(instrument => {\n        this.setState({\n          instrument\n        });\n      });\n    });\n\n    _defineProperty(this, \"playNote\", midiNumber => {\n      this.props.audioContext.resume().then(() => {\n        const audioNode = this.state.instrument.play(midiNumber);\n        this.setState({\n          activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n            [midiNumber]: audioNode\n          })\n        });\n      });\n    });\n\n    _defineProperty(this, \"stopNote\", midiNumber => {\n      this.props.audioContext.resume().then(() => {\n        if (!this.state.activeAudioNodes[midiNumber]) {\n          return;\n        }\n\n        const audioNode = this.state.activeAudioNodes[midiNumber];\n        audioNode.stop();\n        this.setState({\n          activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n            [midiNumber]: null\n          })\n        });\n      });\n    });\n\n    _defineProperty(this, \"stopAllNotes\", () => {\n      this.props.audioContext.resume().then(() => {\n        const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n        activeAudioNodes.forEach(node => {\n          if (node) {\n            node.stop();\n          }\n        });\n        this.setState({\n          activeAudioNodes: {}\n        });\n      });\n    });\n\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes\n    });\n  }\n\n}\n\n_defineProperty(SoundfontProvider, \"propTypes\", {\n  instrumentName: PropTypes.string.isRequired,\n  hostname: PropTypes.string.isRequired,\n  format: PropTypes.oneOf(['mp3', 'ogg']),\n  soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  render: PropTypes.func\n});\n\n_defineProperty(SoundfontProvider, \"defaultProps\", {\n  format: 'mp3',\n  soundfont: 'MusyngKite',\n  instrumentName: 'acoustic_grand_piano'\n});\n\nexport default SoundfontProvider;","map":{"version":3,"sources":["/Users/Nenad/Web Development/melodrom/components/SoundfontProvider.js"],"names":["React","PropTypes","Soundfont","SoundfontProvider","Component","constructor","props","instrumentName","setState","instrument","audioContext","format","soundfont","nameToUrl","name","hostname","then","midiNumber","resume","audioNode","state","play","activeAudioNodes","Object","assign","stop","values","forEach","node","componentDidMount","loadInstrument","componentDidUpdate","prevProps","prevState","render","isLoading","playNote","stopNote","stopAllNotes","string","isRequired","oneOf","func"],"mappings":"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","sourcesContent":["// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  static propTypes = {\n    instrumentName: PropTypes.string.isRequired,\n    hostname: PropTypes.string.isRequired,\n    format: PropTypes.oneOf(['mp3', 'ogg']),\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  \n    render: PropTypes.func,\n  };\n\n  static defaultProps = {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    instrumentName: 'acoustic_grand_piano',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n\n  loadInstrument = instrumentName => {\n    // Re-trigger loading state\n    this.setState({\n      instrument: null,\n    });\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\n      format: this.props.format,\n      soundfont: this.props.soundfont,\n      nameToUrl: (name, soundfont, format) => {\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n      },\n    }).then(instrument => {\n      this.setState({\n        instrument,\n      });\n    });\n  };\n\n  playNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      const audioNode = this.state.instrument.play(midiNumber);\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: audioNode,\n        }),\n      });\n    });\n  };\n\n  stopNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      if (!this.state.activeAudioNodes[midiNumber]) {\n        return;\n      }\n      const audioNode = this.state.activeAudioNodes[midiNumber];\n      audioNode.stop();\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: null,\n        }),\n      });\n    });\n  };\n\n  // Clear any residual notes that don't get called with stopNote\n  stopAllNotes = () => {\n    this.props.audioContext.resume().then(() => {\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n      activeAudioNodes.forEach(node => {\n        if (node) {\n          node.stop();\n        }\n      });\n      this.setState({\n        activeAudioNodes: {},\n      });\n    });\n  };\n\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes,\n    });\n  }\n}\n\nexport default SoundfontProvider;\n"]},"metadata":{},"sourceType":"module"}