{"ast":null,"code":"import _classCallCheck from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/Nenad/Web Development/melodrom/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nvar SoundfontProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(SoundfontProvider, _React$Component);\n\n  var _super = _createSuper(SoundfontProvider);\n\n  function SoundfontProvider(props) {\n    var _this;\n\n    _classCallCheck(this, SoundfontProvider);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"loadInstrument\", function (instrumentName) {\n      // Re-trigger loading state\n      _this.setState({\n        instrument: null\n      });\n\n      Soundfont.instrument(_this.props.audioContext, instrumentName, {\n        format: _this.props.format,\n        soundfont: _this.props.soundfont,\n        nameToUrl: function nameToUrl(name, soundfont, format) {\n          return \"\".concat(_this.props.hostname, \"/\").concat(soundfont, \"/\").concat(name, \"-\").concat(format, \".js\");\n        }\n      }).then(function (instrument) {\n        _this.setState({\n          instrument: instrument\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"playNote\", function (midiNumber) {\n      _this.props.audioContext.resume().then(function () {\n        var audioNode = _this.state.instrument.play(midiNumber);\n\n        _this.setState({\n          activeAudioNodes: Object.assign({}, _this.state.activeAudioNodes, _defineProperty({}, midiNumber, audioNode))\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopNote\", function (midiNumber) {\n      _this.props.audioContext.resume().then(function () {\n        if (!_this.state.activeAudioNodes[midiNumber]) {\n          return;\n        }\n\n        var audioNode = _this.state.activeAudioNodes[midiNumber];\n        audioNode.stop();\n\n        _this.setState({\n          activeAudioNodes: Object.assign({}, _this.state.activeAudioNodes, _defineProperty({}, midiNumber, null))\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopAllNotes\", function () {\n      _this.props.audioContext.resume().then(function () {\n        var activeAudioNodes = Object.values(_this.state.activeAudioNodes);\n        activeAudioNodes.forEach(function (node) {\n          if (node) {\n            node.stop();\n          }\n        });\n\n        _this.setState({\n          activeAudioNodes: {}\n        });\n      });\n    });\n\n    _this.state = {\n      activeAudioNodes: {},\n      instrument: null\n    };\n    return _this;\n  }\n\n  _createClass(SoundfontProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.instrumentName !== this.props.instrumentName) {\n        this.loadInstrument(this.props.instrumentName);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.render({\n        isLoading: !this.state.instrument,\n        playNote: this.playNote,\n        stopNote: this.stopNote,\n        stopAllNotes: this.stopAllNotes\n      });\n    }\n  }]);\n\n  return SoundfontProvider;\n}(React.Component);\n\n_defineProperty(SoundfontProvider, \"propTypes\", {\n  instrumentName: PropTypes.string.isRequired,\n  hostname: PropTypes.string.isRequired,\n  format: PropTypes.oneOf(['mp3', 'ogg']),\n  soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  render: PropTypes.func\n});\n\n_defineProperty(SoundfontProvider, \"defaultProps\", {\n  format: 'mp3',\n  soundfont: 'MusyngKite',\n  instrumentName: 'acoustic_grand_piano'\n});\n\nexport default SoundfontProvider;","map":{"version":3,"sources":["/Users/Nenad/Web Development/melodrom/components/SoundfontProvider.js"],"names":["React","PropTypes","Soundfont","SoundfontProvider","props","instrumentName","setState","instrument","audioContext","format","soundfont","nameToUrl","name","hostname","then","midiNumber","resume","audioNode","state","play","activeAudioNodes","Object","assign","stop","values","forEach","node","loadInstrument","prevProps","prevState","render","isLoading","playNote","stopNote","stopAllNotes","Component","string","isRequired","oneOf","func"],"mappings":"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","sourcesContent":["// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  static propTypes = {\n    instrumentName: PropTypes.string.isRequired,\n    hostname: PropTypes.string.isRequired,\n    format: PropTypes.oneOf(['mp3', 'ogg']),\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  \n    render: PropTypes.func,\n  };\n\n  static defaultProps = {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    instrumentName: 'acoustic_grand_piano',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n\n  loadInstrument = instrumentName => {\n    // Re-trigger loading state\n    this.setState({\n      instrument: null,\n    });\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\n      format: this.props.format,\n      soundfont: this.props.soundfont,\n      nameToUrl: (name, soundfont, format) => {\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n      },\n    }).then(instrument => {\n      this.setState({\n        instrument,\n      });\n    });\n  };\n\n  playNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      const audioNode = this.state.instrument.play(midiNumber);\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: audioNode,\n        }),\n      });\n    });\n  };\n\n  stopNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      if (!this.state.activeAudioNodes[midiNumber]) {\n        return;\n      }\n      const audioNode = this.state.activeAudioNodes[midiNumber];\n      audioNode.stop();\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: null,\n        }),\n      });\n    });\n  };\n\n  // Clear any residual notes that don't get called with stopNote\n  stopAllNotes = () => {\n    this.props.audioContext.resume().then(() => {\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n      activeAudioNodes.forEach(node => {\n        if (node) {\n          node.stop();\n        }\n      });\n      this.setState({\n        activeAudioNodes: {},\n      });\n    });\n  };\n\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes,\n    });\n  }\n}\n\nexport default SoundfontProvider;\n"]},"metadata":{},"sourceType":"module"}